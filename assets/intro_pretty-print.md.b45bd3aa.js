import{_ as s,c as n,o as a,a as l}from"./app.c3b3f769.js";const F=JSON.parse('{"title":"Pretty Printing","description":"","frontmatter":{},"headers":[{"level":2,"title":"Inline Printer","slug":"inline-printer","link":"#inline-printer","children":[]},{"level":2,"title":"Multi-line Printer","slug":"multi-line-printer","link":"#multi-line-printer","children":[]},{"level":2,"title":"Colors","slug":"colors","link":"#colors","children":[]}],"relativePath":"intro/pretty-print.md","lastUpdated":1671090973000}'),e={name:"intro/pretty-print.md"},o=l(`<h1 id="pretty-printing" tabindex="-1">Pretty Printing <a class="header-anchor" href="#pretty-printing" aria-hidden="true">#</a></h1><p><code>Expronicon</code> offers two pretty printers for Julia expressions. The first one is called a <code>InlinePrinter</code> and the second one is called a <code>Printer</code>. The <code>InlinePrinter</code> prints Julia expressions strictly in a single line, while the <code>Printer</code> prints Julia expressions in a multi-line format.</p><p>The inline printer can be accessed by <code>print_inline</code> function, and the multi-line printer can be accessed by <code>print_expr</code> function.</p><h2 id="inline-printer" tabindex="-1">Inline Printer <a class="header-anchor" href="#inline-printer" aria-hidden="true">#</a></h2><p>The inline printer has two configuration</p><ul><li><code>color</code>: what color theme to use, default is <code>Monokai256</code>.</li><li><code>line</code>: print line number or not, default is false.</li></ul><h2 id="multi-line-printer" tabindex="-1">Multi-line Printer <a class="header-anchor" href="#multi-line-printer" aria-hidden="true">#</a></h2><p>The multi-line printer has the following configuration</p><ul><li><code>indent</code>: the indentation level, default is the same as <code>get(io, :indent, 0)</code>.</li><li><code>color</code>: what color theme to use, default is <code>Monokai256</code>.</li><li><code>line</code>: print line number or not, default is <code>false</code>.</li><li><code>always_begin_end</code>: always print <code>begin</code> and <code>end</code> even if it is not necessary, default is <code>false</code>.</li><li><code>root</code>: if <code>true</code> then the expression is printed as a root expression, default is <code>true</code>.</li></ul><h2 id="colors" tabindex="-1">Colors <a class="header-anchor" href="#colors" aria-hidden="true">#</a></h2><p>The color of printing is configured by <code>Expronicon.ColorScheme</code> type.</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">@kwdef</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> ColorScheme</span></span>
<span class="line"><span style="color:#A6ACCD;">    symbol</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    type</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    variable</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    quoted</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    keyword</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    number</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    string</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    comment</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    line</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    call</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    macrocall</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    op</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>The default color is the <code>Monakai256</code>:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Monokai256</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ColorScheme</span><span style="color:#A6ACCD;">(;</span></span>
<span class="line"><span style="color:#A6ACCD;">        symbol</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">141</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        type</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">141</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        variable</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">141</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        quoted</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">141</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        keyword</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">197</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        number</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">141</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        string</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">185</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        comment</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">240</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        line</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">240</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        call</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">81</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        macrocall</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">81</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        op</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">197</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div>`,14),p=[o];function t(c,r,i,C,y,d){return a(),n("div",null,p)}const A=s(e,[["render",t]]);export{F as __pageData,A as default};
