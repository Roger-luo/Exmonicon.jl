import{_ as s,c as a,o as n,a as l}from"./app.f3ce6e86.js";const F=JSON.parse('{"title":"Defining algebra data types","description":"","frontmatter":{},"headers":[{"level":2,"title":"A glance of the syntax","slug":"a-glance-of-the-syntax","link":"#a-glance-of-the-syntax","children":[]},{"level":2,"title":"Singleton variants","slug":"singleton-variants","link":"#singleton-variants","children":[]},{"level":2,"title":"Variants with annoymous fields","slug":"variants-with-annoymous-fields","link":"#variants-with-annoymous-fields","children":[]},{"level":2,"title":"Variants with named fields","slug":"variants-with-named-fields","link":"#variants-with-named-fields","children":[]}],"relativePath":"intro/adts/defining.md","lastUpdated":1671084442000}'),o={name:"intro/adts/defining.md"},p=l(`<h1 id="defining-algebra-data-types" tabindex="-1">Defining algebra data types <a class="header-anchor" href="#defining-algebra-data-types" aria-hidden="true">#</a></h1><p><code>Expronicon</code> provides a macro <code>@adt</code> to define the algebra data types (ADT). The syntax and semantic is very similar to rust&#39;s <code>enum</code> type.</p><h2 id="a-glance-of-the-syntax" tabindex="-1">A glance of the syntax <a class="header-anchor" href="#a-glance-of-the-syntax" aria-hidden="true">#</a></h2><p>The simplest syntax of <code>@adt</code> is:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">variant1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">variant2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>where <code>&lt;name&gt;</code> should be a valid identifier, and can optionally take a supertype as <code>&lt;name&gt; &lt;: &lt;supertype&gt;</code>. <code>&lt;variant&gt;</code> is one of the following:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># variant with no field</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">field1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">field2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;"># variant with annoymous fields</span></span>
<span class="line"><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">field1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">field2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># variant with named fields</span></span>
<span class="line"></span></code></pre></div><h2 id="singleton-variants" tabindex="-1">Singleton variants <a class="header-anchor" href="#singleton-variants" aria-hidden="true">#</a></h2><p>The singleton variants are similar to an enum. It only requires a name and no fields. For example:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> Food </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    Apple</span></span>
<span class="line"><span style="color:#A6ACCD;">    Orange</span></span>
<span class="line"><span style="color:#A6ACCD;">    Banana</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="variants-with-annoymous-fields" tabindex="-1">Variants with annoymous fields <a class="header-anchor" href="#variants-with-annoymous-fields" aria-hidden="true">#</a></h2><p>It is sometimes useful to define a variant with annoymous fields. So you can save a few minites for figuring out a good name for the fields. To declare a variant with annoymous fields, you can use the following syntax:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> Message </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Info</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Warning</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>and you can construct the corresponding variant with the following syntax:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">Info</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">Warning</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="variants-with-named-fields" tabindex="-1">Variants with named fields <a class="header-anchor" href="#variants-with-named-fields" aria-hidden="true">#</a></h2><p>It is also possible to define a variant with named fields. This syntax is the same as a keyword structure definition in Julia (the syntax of <code>Base.@kwdef</code> or <code>Configurations.@option</code>). For example:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> Animal </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> Cat</span></span>
<span class="line"><span style="color:#A6ACCD;">        name</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Tom</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        age</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> Dog</span></span>
<span class="line"><span style="color:#A6ACCD;">        name</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Jack</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        age</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>and you can construct the corresponding variant with the following syntax:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">Cat</span><span style="color:#A6ACCD;">(; name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Tom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">Dog</span><span style="color:#A6ACCD;">(; name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, age</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Or you can also just construct normally:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">Cat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Tom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">Dog</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,22),e=[p];function t(c,r,i,y,D,C){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
