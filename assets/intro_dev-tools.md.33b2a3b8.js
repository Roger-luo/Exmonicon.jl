import{_ as s,c as n,o as a,a as e}from"./app.c2223259.js";const d=JSON.parse('{"title":"Development Tools","description":"","frontmatter":{},"headers":[{"level":2,"title":"Inspecting expressions","slug":"inspecting-expressions","link":"#inspecting-expressions","children":[]},{"level":2,"title":"Testing generated expressions","slug":"testing-generated-expressions","link":"#testing-generated-expressions","children":[]}],"relativePath":"intro/dev-tools.md","lastUpdated":1670998942000}'),l={name:"intro/dev-tools.md"},p=e(`<h1 id="development-tools" tabindex="-1">Development Tools <a class="header-anchor" href="#development-tools" aria-hidden="true">#</a></h1><p><code>Expronicon</code> provides some tools for macro development. We will go through them in this section.</p><h2 id="inspecting-expressions" tabindex="-1">Inspecting expressions <a class="header-anchor" href="#inspecting-expressions" aria-hidden="true">#</a></h2><p>You can use <code>@expr</code> to inspect an expression taken by a macro:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@expr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">:(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>unlike the <code>quote ... end</code> or <code>:(...)</code> syntax, <code>@expr</code> returns whatever is received by the macro without any modifications. This is useful when you want to check the input of an macro definition. For instance, <code>quote ... end</code> will return a <code>Expr(:block, ...)</code> expression, but <code>@expr</code> will return the expression as is.</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@expr</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">           a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">           b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">           a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#F78C6C;">quote</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">#= REPL[5]:2 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">#= REPL[5]:3 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">    b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">#= REPL[5]:4 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@expr</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">:(a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="testing-generated-expressions" tabindex="-1">Testing generated expressions <a class="header-anchor" href="#testing-generated-expressions" aria-hidden="true">#</a></h2><p><code>Expronicon</code> provides a <code>@test_expr</code> macro for testing generated expressions. It is similar to <code>@test</code> in <code>Test</code> package, but it takes <code>&lt;lhs&gt; = &lt;rhs&gt;</code> where <code>&lt;lhs&gt;</code> and <code>&lt;rhs&gt;</code> are two expression to compare with each other.</p><p>This macro only compares the semantic of the expressions, e.g it will ignore line number nodes, recursive code blocks, etc.</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> lhs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">quote</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> rhs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Expr</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">:block</span><span style="color:#A6ACCD;">, :(a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">), :(b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">), :(a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b))</span></span>
<span class="line"><span style="color:#F78C6C;">quote</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">    a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> lhs </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> rhs</span></span>
<span class="line"><span style="color:#89DDFF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@test_expr</span><span style="color:#A6ACCD;"> lhs </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> rhs</span></span>
<span class="line"><span style="color:#A6ACCD;">Test Passed</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>@test_expr</code> requires <code>Test</code> package to be loaded.</p></div>`,12),o=[p];function t(c,r,C,i,A,D){return a(),n("div",null,o)}const F=s(l,[["render",t]]);export{d as __pageData,F as default};
