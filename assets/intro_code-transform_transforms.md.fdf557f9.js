import{_ as s,c as n,o as a,a as l}from"./app.b537f497.js";const F=JSON.parse('{"title":"Transformations","description":"","frontmatter":{},"headers":[{"level":2,"title":"Substitution","slug":"substitution","link":"#substitution","children":[]},{"level":2,"title":"Create similar expressions using nexprs","slug":"create-similar-expressions-using-nexprs","link":"#create-similar-expressions-using-nexprs","children":[]},{"level":2,"title":"Create large code blocks using expr_map","slug":"create-large-code-blocks-using-expr-map","link":"#create-large-code-blocks-using-expr-map","children":[]},{"level":2,"title":"Renumber gensyms","slug":"renumber-gensyms","link":"#renumber-gensyms","children":[]},{"level":2,"title":"Aliasing gensyms","slug":"aliasing-gensyms","link":"#aliasing-gensyms","children":[]},{"level":2,"title":"Remove annotations","slug":"remove-annotations","link":"#remove-annotations","children":[]},{"level":2,"title":"Only give me the names","slug":"only-give-me-the-names","link":"#only-give-me-the-names","children":[]},{"level":2,"title":"Remove single block expression","slug":"remove-single-block-expression","link":"#remove-single-block-expression","children":[]},{"level":2,"title":"Flatten block expressions","slug":"flatten-block-expressions","link":"#flatten-block-expressions","children":[]}],"relativePath":"intro/code-transform/transforms.md","lastUpdated":1671228473000}'),e={name:"intro/code-transform/transforms.md"},o=l(`<h1 id="transformations" tabindex="-1">Transformations <a class="header-anchor" href="#transformations" aria-hidden="true">#</a></h1><p>The code transformation is the key process of meta programming. <code>Expronicon</code> also provides a set of functions to help you make your own transformations.</p><h2 id="substitution" tabindex="-1">Substitution <a class="header-anchor" href="#substitution" aria-hidden="true">#</a></h2><p>We provide a <code>Substitute</code> type to help you make substitution, first you can create a <code>Substitute</code> object with a function that describes what should be substituted</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> sub </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Substitute</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">do</span><span style="color:#A6ACCD;"> expr</span></span>
<span class="line"><span style="color:#A6ACCD;">           expr </span><span style="color:#89DDFF;">isa</span><span style="color:#A6ACCD;"> Symbol </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> expr </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">:x</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><p>then you can call this object with another function describes what to substitute with if matched.</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sub</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, :(x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y))</span></span>
<span class="line"><span style="color:#A6ACCD;">:(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y)</span></span>
<span class="line"></span></code></pre></div><h2 id="create-similar-expressions-using-nexprs" tabindex="-1">Create similar expressions using <code>nexprs</code> <a class="header-anchor" href="#create-similar-expressions-using-nexprs" aria-hidden="true">#</a></h2><p>It is common that one wants to create a block of similar expressions, for example you want to unroll a loop program manually, <code>nexprs</code> can help you here</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nexprs</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">do</span><span style="color:#A6ACCD;"> k</span></span>
<span class="line"><span style="color:#A6ACCD;">           :(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\\$</span><span style="color:#A6ACCD;">k)</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#F78C6C;">quote</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="create-large-code-blocks-using-expr-map" tabindex="-1">Create large code blocks using <code>expr_map</code> <a class="header-anchor" href="#create-large-code-blocks-using-expr-map" aria-hidden="true">#</a></h2><p>It is common that one wants to create a <code>Expr(:block)</code> with a large number of expressions and each expression is created based on different conditions, instead of writing</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">ret </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Expr</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">:block</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">push!</span><span style="color:#A6ACCD;">(ret</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">args, :(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i))</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> ret</span></span>
<span class="line"></span></code></pre></div><p>you can use <code>expr_map</code> to do this to save you some typing</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">expr_map</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">do</span><span style="color:#A6ACCD;"> i</span></span>
<span class="line"><span style="color:#A6ACCD;">    :(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i)</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="renumber-gensyms" tabindex="-1">Renumber gensyms <a class="header-anchor" href="#renumber-gensyms" aria-hidden="true">#</a></h2><p>Renumber gensyms to have a more deterministic output is very useful when writing expression related tests, <code>renumber_gensym</code> can help you do this by renumber gensym by recounting the number of gensyms in given expression (usually a function body)</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">renumber_gensym</span><span style="color:#A6ACCD;">(:(</span><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">gensym</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">:x</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">gensym</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">:x</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">:(</span><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;">#= REPL[3]:1 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;">#= REPL[3]:2 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">var&quot;##x#1&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;">#= REPL[3]:3 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">var&quot;##x#2&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="aliasing-gensyms" tabindex="-1">Aliasing gensyms <a class="header-anchor" href="#aliasing-gensyms" aria-hidden="true">#</a></h2><p>Sometimes you want to alias a gensym to a name for better readability, this idea is borrowed originally from the <code>MacroTools</code> package, <code>alias_gensym</code> will remove <code>#&lt;name&gt;#&lt;id&gt;</code> like gensym with <code>&lt;name&gt;_&lt;id&gt;</code>.</p><h2 id="remove-annotations" tabindex="-1">Remove annotations <a class="header-anchor" href="#remove-annotations" aria-hidden="true">#</a></h2><p>Sometimes you want to remove type annotations from an expression, <code>rm_annotations</code> can help you do this. It will remove the type annotations from the expression.</p><h2 id="only-give-me-the-names" tabindex="-1">Only give me the names <a class="header-anchor" href="#only-give-me-the-names" aria-hidden="true">#</a></h2><p>It is quite often that you only want the names of the variables in an expression, <code>name_only</code> will remove everything else but a <code>Symbol</code>.</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Expronicon</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name_only</span><span style="color:#A6ACCD;">(:(</span><span style="color:#82AAFF;">sin</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)))</span></span>
<span class="line"><span style="color:#89DDFF;">:sin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name_only</span><span style="color:#A6ACCD;">(:(Foo{Int}))</span></span>
<span class="line"><span style="color:#89DDFF;">:Foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name_only</span><span style="color:#A6ACCD;">(:(Foo{Int} </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Real</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#89DDFF;">:Foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name_only</span><span style="color:#A6ACCD;">(:(x</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#89DDFF;">:x</span></span>
<span class="line"></span></code></pre></div><h2 id="remove-single-block-expression" tabindex="-1">Remove single block expression <a class="header-anchor" href="#remove-single-block-expression" aria-hidden="true">#</a></h2><p>To get better readability, sometimes you want to remove the single block like</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>and turn it into</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre></div><p><code>rm_single_block</code> can help you do this.</p><h2 id="flatten-block-expressions" tabindex="-1">Flatten block expressions <a class="header-anchor" href="#flatten-block-expressions" aria-hidden="true">#</a></h2><p>It can be hard to read if you have a nested block expression like</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>or even more nested, <code>flatten_block</code> can help you flatten the block expression to make it easier to read.</p>`,35),p=[o];function t(c,r,i,y,C,A){return a(),n("div",null,p)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
