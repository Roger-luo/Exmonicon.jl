import{_ as s,c as a,o as n,a as l}from"./app.41456145.js";const d=JSON.parse('{"title":"Syntax Types","description":"","frontmatter":{},"headers":[{"level":2,"title":"Create from Julia expression","slug":"create-from-julia-expression","link":"#create-from-julia-expression","children":[]},{"level":2,"title":"Create from scratch","slug":"create-from-scratch","link":"#create-from-scratch","children":[]},{"level":2,"title":"Generate Julia expression","slug":"generate-julia-expression","link":"#generate-julia-expression","children":[]},{"level":2,"title":"Perform pattern match","slug":"perform-pattern-match","link":"#perform-pattern-match","children":[]}],"relativePath":"intro/syntax-types.md","lastUpdated":1670998942000}'),e={name:"intro/syntax-types.md"},o=l(`<h1 id="syntax-types" tabindex="-1">Syntax Types <a class="header-anchor" href="#syntax-types" aria-hidden="true">#</a></h1><p><code>Expronicon</code> exports a set of types that represent different syntaxes in Julia, the following is a table of all the syntax types:</p><table><thead><tr><th>Syntax Type</th><th>Description</th></tr></thead><tbody><tr><td><code>JLFunction</code></td><td>describes a Julia function declaration syntax.</td></tr><tr><td><code>JLStruct</code></td><td>describes a Julia struct declaration syntax.</td></tr><tr><td><code>JLKwStruct</code></td><td>describes a Julia keyword struct declaration syntax.</td></tr><tr><td><code>JLField</code></td><td>describes a Julia field declaration syntax.</td></tr><tr><td><code>JLKwField</code></td><td>describes a Julia keyword field declaration syntax.</td></tr><tr><td><code>JLFor</code></td><td>describes a Julia for loop syntax.</td></tr><tr><td><code>JLIfElse</code></td><td>describes a Julia if-else syntax.</td></tr><tr><td><code>JLMatch</code></td><td>describes a MLStyle match syntax.</td></tr></tbody></table><h2 id="create-from-julia-expression" tabindex="-1">Create from Julia expression <a class="header-anchor" href="#create-from-julia-expression" aria-hidden="true">#</a></h2><p>You can use any of the syntax type&#39;s constructor to create a syntax object from the corresponding expression:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Expronicon</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> expr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> :(</span><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"><span style="color:#A6ACCD;">           x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jlfn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JLFunction</span><span style="color:#A6ACCD;">(expr)</span></span>
<span class="line"><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>then if look what&#39;s inside the syntax object:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jlfn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">head</span></span>
<span class="line"><span style="color:#89DDFF;">:function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jlfn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">args</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">element Vector{Any}</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jlfn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span></span>
<span class="line"><span style="color:#F78C6C;">quote</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">#= REPL[11]:1 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">#= REPL[11]:2 =#</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><p>This is useful when you want to inspect the syntactic information of an expression. A shorter way to create a syntax object from an expression is to use the <code>@expr</code> macro:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jlfn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@expr</span><span style="color:#A6ACCD;"> JLFunction </span><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"><span style="color:#A6ACCD;">           x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="create-from-scratch" tabindex="-1">Create from scratch <a class="header-anchor" href="#create-from-scratch" aria-hidden="true">#</a></h2><p>you can also construct a syntax object from scratch via its keyword-arugment constructor:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jlfn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JLFunction</span><span style="color:#A6ACCD;">(head</span><span style="color:#89DDFF;">=:function</span><span style="color:#A6ACCD;">, name</span><span style="color:#89DDFF;">=:foo</span><span style="color:#A6ACCD;">, args</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">:x</span><span style="color:#A6ACCD;">], body</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">:(x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="generate-julia-expression" tabindex="-1">Generate Julia expression <a class="header-anchor" href="#generate-julia-expression" aria-hidden="true">#</a></h2><p>and convert it back to an expression:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">codegen_ast</span><span style="color:#A6ACCD;">(jlfn)</span></span>
<span class="line"><span style="color:#A6ACCD;">:(</span><span style="color:#F78C6C;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(x)</span></span>
<span class="line"><span style="color:#A6ACCD;">      x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>all the syntax types have a <code>codegen_ast</code> method that converts the syntax object back to an expression.</p><h2 id="perform-pattern-match" tabindex="-1">Perform pattern match <a class="header-anchor" href="#perform-pattern-match" aria-hidden="true">#</a></h2><p>You can also perform <a href="https://thautwarm.github.io/MLStyle.jl/latest/" target="_blank" rel="noreferrer">pattern match</a> on syntax types</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> MLStyle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@match</span><span style="color:#A6ACCD;"> expr </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">JLFunction</span><span style="color:#A6ACCD;">(;head) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> head</span></span>
<span class="line"><span style="color:#A6ACCD;">           _ </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">:function</span></span>
<span class="line"></span></code></pre></div><p>All the syntax type supports MLStyle&#39;s pattern match and can be composed with all MLStyle&#39;s patterns.</p>`,21),p=[o];function t(c,r,i,y,C,A){return n(),a("div",null,p)}const F=s(e,[["render",t]]);export{d as __pageData,F as default};
