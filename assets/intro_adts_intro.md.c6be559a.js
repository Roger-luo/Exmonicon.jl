import{_ as s,c as n,o as a,a as l}from"./app.f3ce6e86.js";const i=JSON.parse(`{"title":"Algebra data type","description":"","frontmatter":{},"headers":[{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"A quick example","slug":"a-quick-example","link":"#a-quick-example","children":[]},{"level":2,"title":"Limitations","slug":"limitations","link":"#limitations","children":[]},{"level":2,"title":"What's happening under the hood","slug":"what-s-happening-under-the-hood","link":"#what-s-happening-under-the-hood","children":[]},{"level":2,"title":"Comparision with other implementations","slug":"comparision-with-other-implementations","link":"#comparision-with-other-implementations","children":[{"level":3,"title":"MLStyle's @data","slug":"mlstyle-s-data","link":"#mlstyle-s-data","children":[]},{"level":3,"title":"Unityper's @compactify","slug":"unityper-s-compactify","link":"#unityper-s-compactify","children":[]}]}],"relativePath":"intro/adts/intro.md","lastUpdated":1672794902000}`),p={name:"intro/adts/intro.md"},o=l(`<h1 id="algebra-data-type" tabindex="-1">Algebra data type <a class="header-anchor" href="#algebra-data-type" aria-hidden="true">#</a></h1><p>Expronicon provides a way to define algebra data types. The syntax and semantic is very similar to rust&#39;s enum type. The algebra data type is useful when you want to define an intermediate representation (IR) for your own language, or when you want to define a type that can be used in a pattern matching.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><ul><li>support <code>MLStyle</code> pattern matching</li><li>type stable - this enables fast pattern matching and code manipulation</li><li>rust-like syntax</li></ul><h2 id="a-quick-example" tabindex="-1">A quick example <a class="header-anchor" href="#a-quick-example" aria-hidden="true">#</a></h2><p>If you are already familiar with rust or other algebra data type syntax, you will find the syntax very familiar.</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Expronicon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ADT</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@adt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> Message </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    Quit</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> Move</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">        y</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">ChangeColor</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-hidden="true">#</a></h2><p><strong>no support for generics</strong>, because we want to guarantee the type stability. For generic algebra data type, you can use the <code>@data</code> macro provided by MLStyle.</p><h2 id="what-s-happening-under-the-hood" tabindex="-1">What&#39;s happening under the hood <a class="header-anchor" href="#what-s-happening-under-the-hood" aria-hidden="true">#</a></h2><p>The <code>@adt</code> macro will generate a new type and a set of constructors for the type. It will wrap mulitple variants in the same Julia struct, and use a tag field to distinguish the variants. This is why it is type stable.</p><p>The <code>@adt</code> macro will also generate a set of functions for pattern matching too, which is why all <code>MLStyle</code> pattern matching works.</p><p>The <code>@adt</code> macro will also generate a set of reflection functions, so that you can inspect the algebra data type easily.</p><h2 id="comparision-with-other-implementations" tabindex="-1">Comparision with other implementations <a class="header-anchor" href="#comparision-with-other-implementations" aria-hidden="true">#</a></h2><p>There has been a few implementations of algebra data type in Julia, we will discuss the differences between them here.</p><h3 id="mlstyle-s-data" tabindex="-1">MLStyle&#39;s <code>@data</code> <a class="header-anchor" href="#mlstyle-s-data" aria-hidden="true">#</a></h3><p>the <code>@data</code> macro provided by MLStyle is very similar to <code>@adt</code> in Expronicon, the main difference is that <code>@data</code> supports generic ADT while <code>@adt</code> does not. The <code>@data</code> macro is also more idiomatic in Julia because it lowers its variants to <code>struct</code> types. However, the <code>@data</code> macro is not type stable, which means it is not suitable for tasks that requires type stability.</p><p>An example of the difference can be found in the following code:</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">module</span><span style="color:#A6ACCD;"> MLStyleADT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> MLStyle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@data</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">@data</span><span style="color:#A6ACCD;"> Message </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">Request</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">Response</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># module</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> MLStyleADT</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">|&gt;</span><span style="color:#A6ACCD;">typeof </span><span style="color:#676E95;"># it is a normal Julia type</span></span>
<span class="line"><span style="color:#A6ACCD;">DataType</span></span>
<span class="line"></span></code></pre></div><p>and for <code>Expronicon</code> we have</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">module</span><span style="color:#A6ACCD;"> ExproniconADT</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Expronicon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ADT</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@adt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> Message </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">Request</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">Response</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># module</span></span>
<span class="line"><span style="color:#A6ACCD;">Main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ExproniconADT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ExproniconADT</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span></span>
<span class="line"><span style="color:#A6ACCD;">Message</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ExproniconADT</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">|&gt;</span><span style="color:#A6ACCD;">typeof</span></span>
<span class="line"><span style="color:#A6ACCD;">Main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ExproniconADT</span><span style="color:#89DDFF;">.var&quot;Message#Type&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="unityper-s-compactify" tabindex="-1">Unityper&#39;s <code>@compactify</code> <a class="header-anchor" href="#unityper-s-compactify" aria-hidden="true">#</a></h3><p>Unityper&#39;s <code>@compactify</code> is a very interesting implementation of algebra data type, it inspires part of the design of <code>Expronicon</code>&#39;s ADT. The main difference is that the support of <strong>pattern matching</strong> and <strong>reflection</strong>. <code>@compactify</code> does not support pattern matching, and it does not support reflection.</p><p>It is worth mentioning that <code>Unityper</code> supports a restricted form of pattern matching using the <code>@compactified</code> macro, but it is not as powerful as <code>MLStyle</code>&#39;s pattern matching.</p><p>We write the example in Unityper&#39;s README in three styles as following</p><p><strong>Expronicon</strong></p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">module</span><span style="color:#A6ACCD;"> ExproniconBench</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Expronicon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ADT</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@adt</span></span>
<span class="line"><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> MLStyle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@match</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">@adt</span><span style="color:#A6ACCD;"> AT </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> A</span></span>
<span class="line"><span style="color:#A6ACCD;">        common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        a</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> B</span></span>
<span class="line"><span style="color:#A6ACCD;">        common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        a</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Complex</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0im</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> C</span></span>
<span class="line"><span style="color:#A6ACCD;">        common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        k</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Complex{Real}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2im</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> D</span></span>
<span class="line"><span style="color:#A6ACCD;">        common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo!</span><span style="color:#A6ACCD;">(xs) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eachindex</span><span style="color:#A6ACCD;">(xs)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@inbounds</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@inbounds</span><span style="color:#A6ACCD;"> xs[i] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@match</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">C</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        _ </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">aaa</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># ExproniconBench</span></span>
<span class="line"></span></code></pre></div><p><strong>Unityper</strong></p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">module</span><span style="color:#A6ACCD;"> UnityperBench</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Unityper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">@compactify</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> AT</span></span>
<span class="line"><span style="color:#A6ACCD;">        common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">        a</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">        a</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Complex</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0im</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> C </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        k</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Complex{Real}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2im</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> D </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo!</span><span style="color:#A6ACCD;">(xs) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eachindex</span><span style="color:#A6ACCD;">(xs)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@inbounds</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@inbounds</span><span style="color:#A6ACCD;"> xs[i] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@compactified</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">AT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">begin</span></span>
<span class="line"><span style="color:#A6ACCD;">        A </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        B </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        C </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        D </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># UnityperBench</span></span>
<span class="line"></span></code></pre></div><p><strong>Naive</strong></p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">module</span><span style="color:#A6ACCD;"> NaiveBench</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">abstract type</span><span style="color:#A6ACCD;"> AT </span><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">@kwdef</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">    common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    a</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">@kwdef</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">    common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    a</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    d</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Complex</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0im</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">@kwdef</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> C </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">    common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    d</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Float64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    k</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Complex{Real}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2im</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"><span style="color:#A6ACCD;">Base</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">@kwdef</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">struct</span><span style="color:#A6ACCD;"> D </span><span style="color:#89DDFF;">&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AT</span></span>
<span class="line"><span style="color:#A6ACCD;">    common_field</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    b</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># not isbits</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo!</span><span style="color:#A6ACCD;">(xs) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eachindex</span><span style="color:#A6ACCD;">(xs)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@inbounds</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xs[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">@inbounds</span><span style="color:#A6ACCD;"> xs[i] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">isa</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                      x </span><span style="color:#89DDFF;">isa</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                      x </span><span style="color:#89DDFF;">isa</span><span style="color:#A6ACCD;"> C </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                      x </span><span style="color:#89DDFF;">isa</span><span style="color:#A6ACCD;"> D </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">error</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># NaiveBench</span></span>
<span class="line"></span></code></pre></div><p>then we can check the performance of <code>foo!</code> function</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> Random</span></span>
<span class="line"><span style="color:#A6ACCD;">rng </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MersenneTwister</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">gs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">rand</span><span style="color:#A6ACCD;">(rng, (NaiveBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">(), NaiveBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">(), NaiveBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">C</span><span style="color:#A6ACCD;">(), NaiveBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">())), </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10000</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">rng </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MersenneTwister</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">xs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">rand</span><span style="color:#A6ACCD;">(rng, (UnityperBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">(), UnityperBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">(), UnityperBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">C</span><span style="color:#A6ACCD;">(), UnityperBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">())), </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10000</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">rng </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MersenneTwister</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">rand</span><span style="color:#A6ACCD;">(rng, (ExproniconBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">A</span><span style="color:#A6ACCD;">(), ExproniconBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">B</span><span style="color:#A6ACCD;">(), ExproniconBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">C</span><span style="color:#A6ACCD;">(), ExproniconBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">D</span><span style="color:#A6ACCD;">())), </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10000</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span></code></pre></div><p>and the results are</p><div class="language-julia"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">using</span><span style="color:#A6ACCD;"> BenchmarkTools</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@btime</span><span style="color:#A6ACCD;"> UnityperBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo!</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">xs)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">57.834</span><span style="color:#A6ACCD;"> μs (</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> allocations</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> bytes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@btime</span><span style="color:#A6ACCD;"> ExproniconBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo!</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">ys)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">57.625</span><span style="color:#A6ACCD;"> μs (</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> allocations</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> bytes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">julia</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">@btime</span><span style="color:#A6ACCD;"> NaiveBench</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo!</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">gs)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">93.375</span><span style="color:#A6ACCD;"> μs (</span><span style="color:#F78C6C;">10000</span><span style="color:#A6ACCD;"> allocations</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">312.50</span><span style="color:#A6ACCD;"> KiB)</span></span>
<span class="line"></span></code></pre></div>`,35),e=[o];function t(c,r,C,A,y,D){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
